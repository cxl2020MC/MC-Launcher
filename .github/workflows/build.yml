name: 构建可执行文件
on: [push]
jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                os:
                  - macos-latest
                  - ubuntu-latest
                  - windows-latest
                  - ubuntu-24.04-arm
                build:
                  - nuitka
                  - pyinstaller
        runs-on: ${{ matrix.os }}
        env:
            PYTHONIOENCODING: utf-8
            NUITKA_CACHE_DIR: ~/_temp/nuitka/cache
        steps:
            - name: 检出仓库代码
              uses: actions/checkout@v4

            - name: 安装 uv
              uses: astral-sh/setup-uv@v5
              with:
                  enable-cache: true

            - name: 使用 uv 安装 Python
              run: uv python install

            - name: 安装 pnpm
              uses: pnpm/action-setup@v4
              with:
                  version: latest
                  run_install: false
            
            - name: 设置 Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: latest
                  cache: "pnpm"
                  cache-dependency-path: web/pnpm-lock.yaml

            - name: 缓存 Nuitka
              if: matrix.build == 'nuitka'
              uses: actions/cache@v3
              with:
                  path: ${{ env.NUITKA_CACHE_DIR }}
                  key: nuitka-cache-${{ runner.os }}-${{ runner.arch }}-${{ github.sha }}
                  restore-keys: |
                      nuitka-cache-${{ runner.os }}-${{ runner.arch }}-

            - name: 安装后端依赖
              working-directory: client
              run: uv sync
            - name: 安装 Nuitka Linux 额外依赖
              if: runner.os == 'Linux' && matrix.build == 'nuitka'
              working-directory: client
              run: |
                  sudo apt-get update
                  sudo apt-get install -y ccache libxml2
            
            - name: 安装前端依赖
              working-directory: web
              run: pnpm install

            - name: 构建前端
              working-directory: web
              run: pnpm build
            
            - name: 使用 PyInstaller 构建二进制文件
              if: matrix.build == 'pyinstaller'
              working-directory: client
              run: uv run pyinstaller app.py --onefile --distpath ./pyinstaller_dist --add-data "../web/dist/:dist"

            - name: 上传 PyInstaller 构建产物
              if: matrix.build == 'pyinstaller'
              uses: actions/upload-artifact@v4
              with:
                  name: PyInstaller-${{ runner.os }}-${{ runner.arch }}
                  path: |
                      client/pyinstaller_dist/
                  include-hidden-files: true

            - name: 使用 Nuitka 构建二进制文件
              if: matrix.build == 'nuitka'
              working-directory: client
              # run: uv run build.py
              run: uv run nuitka app.py

            - name: 上传 Nuitka 构建产物
              if: matrix.build == 'nuitka'
              uses: actions/upload-artifact@v4
              with:
                  name: Nuitka-${{ runner.os }}-${{ runner.arch }}
                  path: |
                      client/nuitka_dist/
                  include-hidden-files: true
            
            - name: 显示目录树
              if: matrix.os == 'ubuntu-latest'
              run: tree
